Erlang è un linguaggio di programmazione non orientato a contesti specifici ma in grado di lavorare con la programmazione concorrente; può gestire cioè più processi che interferiscono tra loro in esecuzione e su sistemi runtime, vale a dire senza due processi distinti per la compilazione e l'esecuzione ma con un unico processo di modifica ed esecuzione continua.
CouchDB, un sistema gestionale di basi di dati non relazionale che usa MapReduce.
Haskell è un linguaggio di programmazione puramente funzionale general-purpose creato da un apposito comitato alla fine degli anni ottanta principalmente per analizzare le caratteristiche dei linguaggi.
È stato chiamato così in onore del matematico e logico statunitense Haskell Curry.
In informatica una macchina di Turing è una macchina ideale che manipola i dati contenuti su un nastro di lunghezza potenzialmente infinita, secondo un insieme prefissato di regole ben definite.
In altre parole, è un modello astratto che definisce una macchina in grado di eseguire algoritmi e dotata di un nastro potenzialmente infinito su cui può leggere e/o scrivere dei simboli.
È un potente strumento teorico che viene largamente usato nella teoria della calcolabilità e nello studio della complessità degli algoritmi, in quanto è di notevole aiuto agli studiosi nel comprendere i limiti del calcolo meccanico.
La sua importanza è tale che oggi, per definire in modo formalmente preciso la nozione di algoritmo, si tende a ricondurlo alle elaborazioni effettuabili con macchine di Turing.
La macchina può agire sopra un nastro che si presenta come una sequenza di caselle nelle quali possono essere registrati simboli di un ben determinato alfabeto finito; essa è dotata di una testina di lettura e scrittura (I/O) con cui è in grado di effettuare operazioni di lettura e scrittura su una casella del nastro. La macchina si evolve nel tempo e ad ogni istante si può trovare in uno stato interno ben determinato facente parte di un insieme finito di stati.
Inizialmente sul nastro viene posta una stringa che rappresenta i dati che caratterizzano il problema che viene sottoposto alla macchina.
La macchina è dotata anche di un repertorio finito di istruzioni che determinano la sua evoluzione in conseguenza dei dati iniziali.
L'evoluzione si sviluppa per passi successivi che corrispondono a una sequenza discreta di istanti successivi.
Le proprietà precedenti sono comuni a molte macchine formali (automa a stati finiti, automa a pila, ...).
Caratteristica delle MdT è quella di disporre di un nastro potenzialmente infinito, cioè estendibile quanto si vuole qualora questo si renda necessario.
Ogni passo dell'evoluzione viene determinato dallo stato attuale s nel quale la macchina si trova e dal carattere c che la testina di I/O trova sulla casella del nastro su cui è posizionata e si concretizza nell'eventuale modifica del contenuto della casella, nell'eventuale spostamento della testina di una posizione verso destra o verso sinistra e nell'eventuale cambiamento dello stato.
Quali azioni vengono effettuate ad ogni passo viene determinato dalla istruzione, che supponiamo unica, che ha come prime due componenti s e c; le altre tre componenti dell'istruzione forniscono nell'ordine il nuovo stato, il nuovo carattere e una richiesta di spostamento verso sinistra, nullo o verso destra.
Una evoluzione della macchina consiste in una sequenza di sue possibili "configurazioni", ogni configurazione essendo costituita dallo stato interno attuale, dal contenuto del nastro (una stringa di lunghezza finita) e dalla posizione sul nastro della testina di I/O.
Nei casi più semplici l'evoluzione ad un certo punto si arresta in quanto non si trova nessuna istruzione in grado di farla proseguire.
Si può avere un arresto in una configurazione "utile" dal punto di vista del problema che si vuole risolvere; in tal caso quello che si trova registrato sul nastro all'atto dell'arresto rappresenta il risultato dell'elaborazione.
Si può avere però anche un arresto "inutile" che va considerato come una conclusione erronea dell'elaborazione.
Va subito detto che può anche accadere che un'evoluzione non abbia mai fine.
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Proin vitae eleifend leo.
Nunc mi purus, mattis vel aliquam posuere, congue eu nunc.
Cras a dolor quis nisi commodo condimentum.
Vivamus sit amet dapibus nisi.
Nullam a metus quis ante feugiat consequat.
Praesent laoreet gravida nisl sit amet scelerisque.
Nulla et nunc non dolor dictum egestas sit amet et massa.
Quisque et neque nec ligula vulputate ornare ac congue metus.
Etiam sit amet risus vestibulum, mattis elit nec, laoreet risus.
In hac habitasse platea dictumst.
Duis non lectus nibh.
Cras in quam in justo volutpat tincidunt a vel metus.
Donec ante nunc, fermentum nec ex vitae, vulputate efficitur mi.
