===============
Tips and Tricks
===============

Creating objects
----------------

If your app requires data in one particular language, it’s preferable to
use class :class:`~mimesis.Generic()`, giving access to all class providers through a
single object, rather than through multiple separate class providers.
Using :class:`~mimesis.Generic()` will allow you to get rid of several extra lines of
code.

Incorrect:

.. code:: python

    >>> from mimesis import Person, Datetime, Text, Code

    >>> person = Person('ru')
    >>> datetime = Datetime('ru')
    >>> text = Text('ru')
    >>> code = Code('ru')


Correct:

.. code:: python

    >>> from mimesis import Generic
    >>> generic = Generic('ru')

    >>> generic.person.username()
    'sherley3354'

    >>> generic.datetime.date()
    '14-05-2007'

Still correct:

.. code:: python

    >>> from mimesis import Person

    >>> p_en = Person('en')
    >>> p_sv = Person('sv')
    >>> # …

Also correct:

.. code:: python

    >>> from mimesis import Person

    >>> person = Person('en')
    >>> with person.override_locale('sv')
    >>>     pass
    >>> # …


It means that importing class providers separately makes sense only if
you limit yourself to the data available through the class you imported,
otherwise it’s better to use :class:`~mimesis.Generic()`.


Inserting data into database
----------------------------

If you need to generate data and import it into a database we strongly
recommend generating data in chunks rather than *600k* at once. Keep
in mind the possible limitations of databases, ORM, etc. The smaller the
generated data chunks are, the faster the process will go.

Good:

.. code:: python

    >>> Patient()._bootstrap(count=2000, locale='de')

Very bad:

.. code:: python

    >>> Patient()._bootstrap(count=600000, locale='de')


Importing images
----------------

Class :class:`~mimesis.Internet()` boasts of several methods which generate image
links (more details here). Links to images locate on remote servers
would be enough, however, if you still want to have a number of random
images locally, you can download images generated by the respective
class :class:`~mimesis.Internet()` methods with the help of function
``download_image()`` from model utils:

.. code:: python

    >>> from mimesis import Internet
    >>> from mimesis.shortcuts import download_image

    >>> net = Internet()

    >>> url = net.stock_image(width=1920, height=1080, keywords=['love', 'passion'])
    >>> download_image(url=url, save_path='/some/path/')


Romanization of Cyrillic data
-----------------------------

If your locale belongs to the family of Cyrillic languages, but you need
latinized locale-specific data, then you can use decorator :func:`~mimesis.decorators.romanized` which
help you romanize your data.

Example of usage for romanization of Russian full name:

.. code:: python

    >>> from mimesis.decorators import romanized

    >>> @romanized('ru')
    ... def russian_name():
    ...     return 'Вероника Денисова'

    >>> russian_name()
    'Veronika Denisova'

At this moment it works only for Russian (**ru**),
Ukrainian (**uk**) and Kazakh (**kk**):



Integration with third-party libraries
--------------------------------------

- `mimesis-factory`_ - Integration with ``factory_boy``.
- `pytest-mimesis`_ - is a pytest plugin that provides pytest fixtures for Mimesis providers.

.. _mimesis-factory: https://github.com/mimesis-lab/mimesis-factory
.. _pytest-mimesis: https://github.com/lk-geimfari/pytest-mimesis
